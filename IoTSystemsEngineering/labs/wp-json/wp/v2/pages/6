{"id":6,"date":"2018-09-18T04:58:08","date_gmt":"2018-09-18T04:58:08","guid":{"rendered":"https:\/\/lehi.dev\/labs\/?page_id=6"},"modified":"2018-09-18T20:30:14","modified_gmt":"2018-09-18T20:30:14","slug":"lab1","status":"publish","type":"page","link":"https:\/\/lehi.dev\/labs\/lab1\/","title":{"rendered":"lab1"},"content":{"rendered":"<h1><span style=\"font-weight: 400;\">Wifi-Controlled LED Stoplight (Raspberry Pi)<\/span><\/h1>\n<h1><span style=\"font-weight: 400;\">Online Link<\/span><\/h1>\n<p><span style=\"font-weight: 400;\">This lab is available as part of my online portfolio at: <\/span><a href=\"https:\/\/lehi.dev\/labs\/lab1\"><span style=\"font-weight: 400;\">https:\/\/lehi.dev\/labs\/lab1<\/span><\/a><\/p>\n<h1><span style=\"font-weight: 400;\">Objective<\/span><\/h1>\n<p><span style=\"font-weight: 400;\">The purpose of this lab is learn how to create a wifi-controlled stoplight. These principles include:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Install and become familiar with raspberry pi OS.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Enumerate requirements from use case and user stories.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Develop a minimum viable product and refactor it to account for new requirements.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Learn and use Github private repository and share it with a specific contributor.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Become familiar with representing the desired system by using flowcharts, state diagrams, etc.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Learn to plan what materials will be necessary to accomplish the system\u2019s purpose<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Become familiar with coding in the Raspberry Pi<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Become familiar and learn how to use Raspberry pi GPIO <\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Learn to run a server that accepts rest protocol to change raspberry pi GPIO stoplight state<\/span><\/li>\n<\/ul>\n<h1><span style=\"font-weight: 400;\">Materials<\/span><\/h1>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Personal Computer<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Raspberry pi 3 Model B Quad-Core 1.2 Ghz 1 GB RAM<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">MicroSD card<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">2.5A USB Power Supply with micro USB Cable<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">1 x breadboard<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">1 x Red LED<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">1 x Yellow LED<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">1 x Green LED<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">3 x 220 \u03a9 Resistor (<\/span><span style=\"font-weight: 400;\">RR<\/span><span style=\"font-weight: 400;\">BlBl<\/span><span style=\"font-weight: 400;\">Br<\/span><span style=\"font-weight: 400;\">) <\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Jump wires<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">GPIO pinout guide<\/span><\/li>\n<\/ul>\n<h1><span style=\"font-weight: 400;\">References<\/span><\/h1>\n<p><span style=\"font-weight: 400;\">The following resources were used in this lab:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><a href=\"https:\/\/www.raspberrypi.org\/documentation\/installation\/installing-images\/\"><span style=\"font-weight: 400;\">https:\/\/www.raspberrypi.org\/documentation\/installation\/installing-images\/<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; This site provides guide to download RASPBIAN Operating System and writing the OS into a \u00a0MicroSD card using Etcher application<\/span><\/li>\n<li style=\"font-weight: 400;\"><a href=\"https:\/\/www.raspberrypi.org\/magpi\/thonny\/\"><span style=\"font-weight: 400;\">https:\/\/www.raspberrypi.org\/magpi\/thonny\/<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; Great site that teaches you how to use and \u00a0debug Python using an IDE called Thonny<\/span><\/li>\n<li style=\"font-weight: 400;\"><a href=\"https:\/\/blog.miguelgrinberg.com\/post\/designing-a-restful-api-with-python-and-flask\"><span style=\"font-weight: 400;\">https:\/\/blog.miguelgrinberg.com\/post\/designing-a-restful-api-with-python-and-flask<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; Great tutorial to get up and running on using flask for rest API<\/span><\/li>\n<li style=\"font-weight: 400;\"><a href=\"https:\/\/www.tutorialspoint.com\/flask\/flask_templates.htm\"><span style=\"font-weight: 400;\">https:\/\/www.tutorialspoint.com\/flask\/flask_templates.htm<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; This teaches how flask can also serve you html from the server and even ingest variables from API to the web page.<\/span><\/li>\n<li style=\"font-weight: 400;\"><a href=\"https:\/\/www.bestcssbuttongenerator.com\/\"><span style=\"font-weight: 400;\">https:\/\/www.bestcssbuttongenerator.com\/<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; CSS Button Generator resource.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">GPIO pinout guide (<\/span><a href=\"https:\/\/pinout.xyz\/\"><span style=\"font-weight: 400;\">https:\/\/pinout.xyz\/<\/span><\/a><span style=\"font-weight: 400;\">) &#8211; Great resource to find which pins to use.<\/span><\/li>\n<li style=\"font-weight: 400;\"><a href=\"https:\/\/www.w3schools.com\/howto\/howto_css_switch.asp\"><span style=\"font-weight: 400;\">https:\/\/www.w3schools.com\/howto\/howto_css_switch.asp<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; Sliders reference.<\/span><\/li>\n<li style=\"font-weight: 400;\"><a href=\"https:\/\/eli.thegreenplace.net\/2017\/interacting-with-a-long-running-child-process-in-python\/\"><span style=\"font-weight: 400;\">https:\/\/eli.thegreenplace.net\/2017\/interacting-with-a-long-running-child-process-in-python\/<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; Spawn a child process and terminate it.<\/span><\/li>\n<li style=\"font-weight: 400;\"><a href=\"https:\/\/www.geeksforgeeks.org\/global-local-variables-python\/\"><span style=\"font-weight: 400;\">https:\/\/www.geeksforgeeks.org\/global-local-variables-python\/<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; Python global variables.<\/span><\/li>\n<li style=\"font-weight: 400;\"><a href=\"https:\/\/stackoverflow.com\/questions\/46349370\/javascript-file-not-found-using-relative-path-during-flask-render-template\"><span style=\"font-weight: 400;\">https:\/\/stackoverflow.com\/questions\/46349370\/javascript-file-not-found-using-relative-path-during-flask-render-template<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; More about Flask project files structure.<\/span><\/li>\n<li style=\"font-weight: 400;\"><a href=\"http:\/\/flask.pocoo.org\/docs\/0.12\/patterns\/packages\/#larger-applications\"><span style=\"font-weight: 400;\">http:\/\/flask.pocoo.org\/docs\/0.12\/patterns\/packages\/#larger-applications<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; Flask project structure.<\/span><\/li>\n<li style=\"font-weight: 400;\"><a href=\"https:\/\/stackoverflow.com\/questions\/22259847\/application-not-picking-up-css-file-flask-python\"><span style=\"font-weight: 400;\">https:\/\/stackoverflow.com\/questions\/22259847\/application-not-picking-up-css-file-flask-python<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; Flask html and css structure<\/span><\/li>\n<\/ul>\n<h1><span style=\"font-weight: 400;\">Procedures<\/span><\/h1>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Download and install Raspbian OS into raspberry pi from <\/span><a href=\"https:\/\/www.raspberrypi.org\/downloads\/raspbian\/\"><span style=\"font-weight: 400;\">https:\/\/www.raspberrypi.org\/downloads\/raspbian\/<\/span><\/a><span style=\"font-weight: 400;\">. <\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Used the pre-installed Thonny Python IDE to develop the code for the stoplight.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Used the GPIO pinout to decide which pins to use for this project from <\/span><a href=\"https:\/\/pinout.xyz\/\"><span style=\"font-weight: 400;\">https:\/\/pinout.xyz\/<\/span><\/a><span style=\"font-weight: 400;\">.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">In version 1 I wanted to design a system that all it would do was to turn on the lights according to the pins that were on.<\/span>\n<ul>\n<li><span style=\"font-weight: 400;\">Chose the following pins to be on:<\/span>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Pin 7: Green color<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Pin 5: Yellow color<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Pin 3: Red color<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Pin 9: Ground<\/span><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p><a href=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/IMG_6116.jpg\"><img loading=\"lazy\" class=\"alignnone size-medium wp-image-13\" src=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/IMG_6116-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" srcset=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/IMG_6116-300x225.jpg 300w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/IMG_6116-768x576.jpg 768w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/IMG_6116-1024x768.jpg 1024w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<ul>\n<li><span style=\"font-weight: 400;\">Had a 220 \u03a9 Resistor connected between positive and LED positive, although I could have also connected also in between Ground and negative side of LED negative and the effect would have been the same.<\/span>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">I had one Ground pin from GPIO to breadboard negative column, then male jumpers connecting all 3 LED negatives.<\/span><\/li>\n<\/ul>\n<\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">In version 2, once I got the lights to come on using GPIO commands then I included a python library server called Flask to facilitate Restful API calls to change state from the state machine as well as serving html page to send Ajax commands to the backend server. All endpoints served by Flask server returns a json payload with state machine information. I configured Flask to serve to any client that is in same network.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">For the case of blinking lights until another command would stop it: I opened a child process to run a python script file which contained an infinite loop through turning on and off the LEDs. I the kept track of that process. Created logic to check if there was already a process running to blink the lights if so don\u2019t create a new one, if not then create a new process and keep track of it. When the slider is off I then sent the terminate signal to the process that the server is keeping track of.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Models:<\/span>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Functionality: State machine as shown on the diagram below, this is a simplified form of the state machine as in reality I have created many endpoints to change the state machine for each led, but the basic concept is described below for each endpoint it reacts as the following diagram:<\/span><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p><a href=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/StateMachineLab1.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-23\" src=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/StateMachineLab1.jpg\" alt=\"\" width=\"701\" height=\"394\" srcset=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/StateMachineLab1.jpg 701w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/StateMachineLab1-300x169.jpg 300w\" sizes=\"(max-width: 701px) 100vw, 701px\" \/><\/a><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">On Start up, the machine will be on LED Off state<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Case \u201cLED OFF\u201d<\/span>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">If system receives \/ledOn then system changes to \u201cLED ON\u201d state.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">If system receives \/ledOff then system remain in \u201cLED OFF\u201d state.<\/span><\/li>\n<\/ul>\n<\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Case \u201cLED ON\u201d<\/span>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">If system receives \/ledOn then system remains in \u201cLED ON\u201d state.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">If system receives \/ledOff then system changes to \u201cLED OFF\u201d state.<\/span><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">System Flow: See Appendix 1.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Component and Schematic Diagram: The stoplight system is represented below by the following diagrams (Component and Schematic Diagram respectively)<\/span><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p><a href=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-12.16.52-AM.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-19\" src=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-12.16.52-AM.png\" alt=\"\" width=\"780\" height=\"444\" srcset=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-12.16.52-AM.png 780w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-12.16.52-AM-300x171.png 300w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-12.16.52-AM-768x437.png 768w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-12.17.11-AM.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-18\" src=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-12.17.11-AM.png\" alt=\"\" width=\"533\" height=\"315\" srcset=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-12.17.11-AM.png 533w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-12.17.11-AM-300x177.png 300w\" sizes=\"(max-width: 533px) 100vw, 533px\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\">Diagrams were facilitated by open source programs such as: Google drive plugin draw.io Diagrams and Fritzing.<\/span><\/p>\n<p>&nbsp;<\/p>\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Program the code in the Thonny Python IDE (pre-installed with Raspbian OS)<\/span>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Code the Raspberry pi GPIO interaction with breadboard, resistors, LEDs accordingly to match the previous component\/schematic diagram.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Test\/Debug constantly so the final product would be bug free. You can debug in Thonny Python IDE by going to:<\/span>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Run &gt; Debug Current Script (Ctrl+F5)<\/span><\/li>\n<\/ul>\n<\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Enable variables watch, this will help to see the value of variables at a given part of the code as you step over or step in the methods you have coded.<\/span>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">View &gt; Variables<\/span><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h1><span style=\"font-weight: 400;\">Thought Questions<\/span><\/h1>\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">What language did you choose for implementing this project? <\/span><span style=\"font-weight: 400;\">Phyton <\/span><span style=\"font-weight: 400;\">Why?<\/span><span style=\"font-weight: 400;\"> Because it is a well versed language that can do many things and it is already includes libraries such as GPIO that can communicate with raspberry pi.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">What is the purpose of the resistor in this simple circuit? What would happen if you omitted it? <\/span><span style=\"font-weight: 400;\">\u201c<\/span><span style=\"font-weight: 400;\">The main <\/span><b>function<\/b><span style=\"font-weight: 400;\"> of <\/span><b>resistors<\/b><span style=\"font-weight: 400;\"> in a <\/span><b>circuit<\/b><span style=\"font-weight: 400;\"> is to control the flow of current to other components. If too much current flows through an LED it is destroyed. So a <\/span><b>resistor<\/b><span style=\"font-weight: 400;\"> is used to limit the current.\u201d (<\/span><a href=\"http:\/\/www.madlab.org\/electrnx\/lesson2.html\"><span style=\"font-weight: 400;\">http:\/\/www.madlab.org\/electrnx\/lesson2.html<\/span><\/a><span style=\"font-weight: 400;\">)<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">What are practical applications of this device? What enhancements or modifications would you make? <\/span><span style=\"font-weight: 400;\">This is mainly to get started with raspberry pi GPIO and facilitate the learning on how to interact from raspberry pi and a breadboard for instance. In regards to enhancements, I would create more endpoints to check on current state of the state machine and add UI logic to behave accordingly, so that once a slider is activated then it \u00a0deactivates the other sliders, thus eliminating out of state synch issues. Another enhancement would be to make it so that the UI always have the current state of the stoplight no matter how many clients connects to stoplight server, that may be tricky because it may require more client calling back and forth the back end server, potentially making it inefficient by calling backend too many times.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Please estimate the total time you spent on this lab and report. <\/span>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">1.5 hrs building and refactoring the circuit<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">6 hours coding the server and fixing bugs and getting acquainted with GPIO coding and setting up a Restful server using Flask Python library<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">4 hours working on the lab report using tools such as Google draw.io Diagrams \u00a0and fritzing.<\/span><\/li>\n<li><span style=\"font-weight: 400;\">2 hours publishing a website with lab 1 instructions, mainly dealing with formats.<\/span><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h1><span style=\"font-weight: 400;\">Certification of Work<\/span><\/h1>\n<p><span style=\"font-weight: 400;\">I certify that the solution presented in this lab represents my own work. In the case where I have borrowed code or ideas from another person, I have provided a link to the author\u2019s work in the references, and included a citation in the comments of my code.<\/span><\/p>\n<p>&nbsp;<\/p>\n<p><span style=\"font-weight: 400;\">&#8212; Lehi Alcantara<\/span><\/p>\n<h1><span style=\"font-weight: 400;\">Appendix<\/span><\/h1>\n<h2><span style=\"font-weight: 400;\">Appendix 1: System Flowchart<\/span><\/h2>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/System-Flowchart-1.jpg\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-15\" src=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/System-Flowchart-1.jpg\" alt=\"\" width=\"391\" height=\"1131\" srcset=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/System-Flowchart-1.jpg 391w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/System-Flowchart-1-104x300.jpg 104w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/System-Flowchart-1-354x1024.jpg 354w\" sizes=\"(max-width: 391px) 100vw, 391px\" \/><\/a><\/p>\n<h2><span style=\"font-weight: 400;\">Appendix 2: System Interface &#8211; Web Page<\/span><\/h2>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p><span style=\"font-weight: 400;\">State: startup<\/span><\/p>\n<p><a href=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.26-AM.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-16\" src=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.26-AM.png\" alt=\"\" width=\"917\" height=\"548\" srcset=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.26-AM.png 917w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.26-AM-300x179.png 300w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.26-AM-768x459.png 768w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\">State: greenLightOn<\/span><\/p>\n<p><a href=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.39-AM.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-17\" src=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.39-AM.png\" alt=\"\" width=\"917\" height=\"502\" srcset=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.39-AM.png 917w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.39-AM-300x164.png 300w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.39-AM-768x420.png 768w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a><\/p>\n<p><span style=\"font-weight: 400;\">State: greenLightOff<\/span><\/p>\n<p><a href=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.53-AM.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-21\" src=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.53-AM.png\" alt=\"\" width=\"918\" height=\"524\" srcset=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.53-AM.png 918w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.53-AM-300x171.png 300w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.22.53-AM-768x438.png 768w\" sizes=\"(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px\" \/><\/a><\/p>\n<h2><span style=\"font-weight: 400;\">Appendix 3: Server Monitor Output<\/span><\/h2>\n<p><a href=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.26.29-AM.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-20\" src=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.26.29-AM.png\" alt=\"\" width=\"641\" height=\"325\" srcset=\"https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.26.29-AM.png 641w, https:\/\/lehi.dev\/labs\/wp-content\/uploads\/2018\/09\/Screen-Shot-2018-09-17-at-1.26.29-AM-300x152.png 300w\" sizes=\"(max-width: 641px) 100vw, 641px\" \/><\/a><\/p>\n<h2><span style=\"font-weight: 400;\">Appendix 4: Raspberry Pi Code<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">(Available at <\/span><a href=\"https:\/\/github.com\/ylehilds\/stoplight\"><span style=\"font-weight: 400;\">https:\/\/github.com\/ylehilds\/stoplight<\/span><\/a><span style=\"font-weight: 400;\">)<\/span><\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Wifi-Controlled LED Stoplight (Raspberry Pi) Online Link This lab is available as part of my online portfolio at: https:\/\/lehi.dev\/labs\/lab1 Objective The purpose of this lab is learn how to create a wifi-controlled stoplight. These principles include: Install and become familiar with raspberry pi OS. Enumerate requirements from use case and user stories. Develop a minimum &hellip; <\/p>\n<p class=\"link-more\"><a href=\"https:\/\/lehi.dev\/labs\/lab1\/\" class=\"more-link\">Continue reading<span class=\"screen-reader-text\"> &#8220;lab1&#8221;<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/lehi.dev\/labs\/wp-json\/wp\/v2\/pages\/6"}],"collection":[{"href":"https:\/\/lehi.dev\/labs\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/lehi.dev\/labs\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/lehi.dev\/labs\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/lehi.dev\/labs\/wp-json\/wp\/v2\/comments?post=6"}],"version-history":[{"count":14,"href":"https:\/\/lehi.dev\/labs\/wp-json\/wp\/v2\/pages\/6\/revisions"}],"predecessor-version":[{"id":29,"href":"https:\/\/lehi.dev\/labs\/wp-json\/wp\/v2\/pages\/6\/revisions\/29"}],"wp:attachment":[{"href":"https:\/\/lehi.dev\/labs\/wp-json\/wp\/v2\/media?parent=6"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}